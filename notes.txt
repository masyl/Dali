
Allow event subscriptions onTag, onDecorator, onWhatever

---------

Alternate tag for if-or, if-else, any other form ?

{{if 2 > 3}}
	yaaata!
{{if-else 2 = 2}}  <--- more than one
	Pfff...
{{if-not}}
	Pfff...
{{endif}}


-----------

Is a with statement usefull ?
Could it have practical alternateTags.

{{with this.reservation.days }}
	{{out this.length /}} days left
{{with-empty}}
	No days left!
{{endwith}}

-----------

// output items in a var

{{each this.items, "parentItem"}}
	{{each this.children, "child"}}
		{{out var.parentItem.name /}} is parent of {{out var.child.name /}}
	{{/each}}
{{/each}}

or alternate syntax

{{each this.items @@ "parentItem"}}
	{{each this.children, "child"}}
		{{out var.parentItem.name /}} is parent of {{out var.child.name /}}
	{{/each}}
{{/each}}

or with decorator ?

{{each this.items >> var "parentItem"}}
	{{each this.children >> var "child"}}
		{{out var.parentItem.name /}} is parent of {{out var.child.name /}}
	{{/each}}
{{/each}}

same as :

{{each this.items}}
	{{define "parentItem", this /}}
	{{each this.children}}
		{{define "child", this /}}
		{{out var.parentItem.name /}} is parent of {{out var.child.name /}}
	{{/each}}
{{/each}}




{{cycle "odd", "even" }}  (like django)

-------
Define a variable using JSON and store as an object

NOT POSSIBLE FOR NOW BECAUSE DECORATORS ARE PARSED
OUTSIDE OF THE TAG HANDLER ITSELF

{{var "messageCount" >> json /}}
	{
		a: 1,
		b: 2
	}
{{/var}}

-------
i18n could be a template global

{{out i18n("Bonjour à vous les amis!")/}}
{{out "Bonjour à vous les amis!" >> i18n /}}
{{i18n}}Bonjour à vous les amis!{{/i18n}}
{{i18n "bonjour"}}Bonjour à vous les amis!{{/i18n}}
{{out >> i18n "bonjourAvous"}}Bonjour à vous les amis!{{/i18n}}

------

More complete Loop object

** SOULD be a prefixed var like so _loop

_loop.counter 	The current iteration of the loop (1-indexed)
_loop.revcounter 	The number of iterations from the end of the loop (1-indexed)
_loop.first 	True if this is the first time through the loop
_loop.last 	True if this is the last time through the loop
_loop.parent 	For nested loops, this is the loop "above" the current one

----------
Special vars

vars._parent	The parent data context
env._parent		The parent environement ?

----------

Custom Tags

- The this object is the collection of named arguments
- arguments and alternate blocks for passing prefixed vars

data= {
	first: "John",
	last: "Doe",
	favoriteColor: "green",
	unreadMessages: 4
}

{{tag "welcomeBox", "first", "last", "color"}}
	<p>Welcome {{out this.first + " " + this.last /}}</p>
	<div style="padding:20px; border:1px solid; background: #fff;">
		{{out vars._output /}}
	</div>
{{endtag}}

{{var "messageCount", this.unreadMessages /}}
{{welcomeBox this.firstname, this.lastname, this.favoriteColor }}
	<p style="color:{{out this.color /}}">You have {{out vars.messageCount /}} new messages in your inbox!</p>
{{endwelcomeBox}}


-----

Ability to use any tag as functions:
- last argument can be used to pass vars

{{var "welcomeMessage"}}
	<p style="color:{{out this.color /}}">You have {{out vars.messageCount /}} new messages in your inbox!</p>
{{/var}}

{{out welcomeBox("John", "Doe", 4, {_output: welcomeMessage}) >> uppercase /}}

-----

void decorator to process a tag, but cancel it's output

{{out "Dude..." >> void }}
	where's my car!
{{endout}}

-----

Reusability tags:
{{load "templateName" }}	For loading vars, templates, custom tags but without affecting rendering

Syntax like:
	{{include "templatenName" /}}
	{{partial "templatenName" /}}
Is made obsolete with the richer :
	{{render "templateName" /}}

-------


------------------------------------------
SYNTAXIC EQUIVALENCIES
------------------------------------------

Example for this syntax:
{{ firstof var1, var2, var3, "fallback value" /}}  from django
done like this : {{ out (0 || 0 || 0 || 2 || 1) }}

-------

/**
 * Sample to show a Loop 31 times without data
 */
 Or {{each spawn(31) }} or similar ?
 Or {{each new Array(31) }}

----