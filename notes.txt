
TO BE A CROSS-LANGUAGE TOOL DALI WILL HAVE TO IMPLEMENT A
SIMPLIFIED EXPRESSION PARSER INSTEAD OF PERMITTING NATIVE
JAVASCRIPT EXPRESSION

---------
VARIOUS TASKS TO BE SORTED:
	- Make asynchronous?
	- Fancy logo and color scheme
	- Rename whole project to "Dali"
	- Readme document for GitHub
	- Homepage hosted on GitHub
	- Formal roadmap
	- Better character espcaping routines.
	- More complete jQuery API
	- Error on "too many recursion" or MaxiumRecursionDepth
	- Support both withspace and spaceless syntax: {{if -}} ... {{endif}}
	- Consider callbacks vs event subscription
	- Caching?

---------------------------------------------

	VERSION 1
	Objectives:
	- Support typical templating syntax
	- No blindspot that would make it impossible to render some scenarios
	- Good error reporting
	- Stable enough so that versions 1.X are backward compatible

---------------------------------------------

	Loading templates

	{{load "templateName" }}	For loading vars, templates, custom tags but without affecting rendering

	Syntax like:
		{{include "templatenName" /}}
		{{partial "templatenName" /}}
	Is made obsolete with the richer :
		{{render "templateName" /}}

	-----------

	{{each-odd}} alternate tag

	-----------

	Complete _loop object

	** SOULD be a prefixed var like so _loop

	_loop.parent 	For nested loops, this is the loop "above" the current one
	_loop.odd()	 	true if items is odd one
	_loop.counter() 	The current iteration of the loop (1-indexed)
	_loop.revcounter() 	The number of iterations from the end of the loop (1-indexed)
	_loop.first() 	True if this is the first time through the loop
	_loop.last() 	True if this is the last time through the loop

	-----------

	Methods to register filters and tags.


---------------------------------------------

	VERSIONS 1.1
	Objectives:
		- Richer API for full control
		- Richer syntax to do more with less code

---------------------------------------------
	
	An event API for onTag, onFilter, onWhatever, etc

	-----------

	// Each tag argument to output iterated items in vars
	// for easy access in nested statements

	{{each this.items, "dad"}}
		{{each vars.dad.children, "child"}}
			{{out vars.parentItem.name /}} is parent of {{out vars.child.name /}}
		{{/each}}
	{{/each}}

	Is equivalent to  :

	{{each this.items}}
		{{define "dad", this /}}
		{{each vars.dad.children}}
			{{define "child", this /}}
			{{out vars.dad.name /}} is dad of {{out vars.child.name /}}
		{{/each}}
	{{/each}}

	-----------

	Access to parent data and environment

	vars._parent	The parent data context
	env._parent		The parent environement ?

	---------

	Custom Tags

	- The this object is the collection of named arguments
	- arguments and alternate blocks for passing prefixed vars

	data= {
		first: "John",
		last: "Doe",
		favoriteColor: "green",
		unreadMessages: 4
	}

	{{tag "welcomeBox", "first", "last", "color"}}
		<p>Welcome {{out this.first + " " + this.last /}}</p>
		<div style="padding:20px; border:1px solid; background: #fff;">
			{{out vars._output /}}
		</div>
	{{endtag}}

	{{var "messageCount", this.unreadMessages /}}
	{{welcomeBox this.firstname, this.lastname, this.favoriteColor }}
		<p style="color:{{out this.color /}}">You have {{out vars.messageCount /}} new messages in your inbox!</p>
	{{endwelcomeBox}}

	---------

	i18n could be a template global

	{{out i18n("Bonjour à vous les amis!")/}}
	{{out "Bonjour à vous les amis!" >> i18n /}}
	{{i18n}}Bonjour à vous les amis!{{/i18n}}
	{{i18n "bonjour"}}Bonjour à vous les amis!{{/i18n}}
	{{out >> i18n "bonjourAvous"}}Bonjour à vous les amis!{{/i18n}}

	-----------

	Ability to use any tag as functions:
	- last argument can be used to pass vars

	{{var "welcomeMessage"}}
		<p style="color:{{out this.color /}}">You have {{out vars.messageCount /}} new messages in your inbox!</p>
	{{/var}}

	{{out tags.welcomeBox("John", "Doe", 4, {_output: welcomeMessage}) >> uppercase /}}

	-----------

	Ability to use any filter as functions:

	{{out deco.uppercase(this.value) /}}

---------------------------------------------

	VERSIONS 1.2
	Objectives:
		- More syntactic sugar
		- More complete set of native filters and utilities
		- Support for more edge case

---------------------------------------------

	{{cycle "odd", "even" }}  (like django)

	-----------

	Syntaxt for auto trimming white spaces

	-----------

	{{each-every 4, -1}} alternate tag for alternating items

	-----------

	Define a variable using JSON and store as an object

	NOT POSSIBLE FOR NOW BECAUSE FILTERS ARE PARSED
	OUTSIDE OF THE TAG HANDLER ITSELF

	{{var "messageCount" >> json /}}
		{
			a: 1,
			b: 2
		}
	{{/var}}

	-----------

	"with" tag

	Is a with statement usefull ?
	Could it have practical alternateTags.

	{{with this.reservation.days }}
		{{out this.length /}} days left
	{{with-empty}}
		No days left!
	{{endwith}}



------------------------------------------
SYNTAXIC EQUIVALENCIES - To make as sample
Whay to emulate behavior of other templating engine without using
special purpose tags, and favor standard javascript
------------------------------------------

	Example for this syntax:
	{{ firstof var1, var2, var3, "fallback value" /}}  from django
	done like this : {{ out (0 || 0 || 0 || 2 || 1) }}

	-------

	/**
	 * Sample to show a Loop 31 times without data
	 */
	 Or {{each spawn(31) }} or similar ?
	 Or {{each new Array(31) }}

	----