
Allow event subscriptions onTag, onDecorator, onWhatever

---------

Template inheritance:

{{var "pageClass", "yeah" /}}
{{render "templateId" }}
{{render-block "title" >> trime}}
	Yeah!
{{render-block "content" }}
	Yeah!!! this is content!
{{render-block "footer" }}
	Yeah!!! this is content!
{{endrender}}


{{template "basePage"}}
	{{render "html5"}}
	{{render-block "head" }}
		<title>Welcome :: {{out vars.template.title /}}</title>
	{{render-block "header" }}
		{{out vars.template.header /}}
	{{render-block "content" }}
		{{out vars.template.content /}}
	{{render-block "footer"}}
		<div style="border: 1px solid; padding: 20px">
				{{out vars.template.footer /}}
				<div class="copyright">Copyright 2011</div>
		<div>
	{{endrender}}
{{endtemplate}}


{{template "html5"}}
	<html>
		<head>
			{{out vars.template.head /}}
		</head>
		<body class="{{out vars.pageClass /}}">
			{{out vars.template.header /}}
			{{out vars.template.content /}}
			{{out vars.template.footer /}}
		</body>
	</html>
{{endtemplate}}

---------

Alternate tag for if-or, if-else, any other form ?

{{if 2 > 3}}
	yaaata!
{{if-or 2 = 2}}  <--- more than one
	Pfff...
{{if-else}}
	Pfff...
{{endif}}


-----------

Is it usefull ?

{{with this.reservation.days}}
	{{out this.length /}} days left
{{endwith}}

-----------

// output items in a var

{{each this.items, "parentItem"}}
	{{each this.children, "child"}}
		{{out var.parentItem.name /}} is parent of {{out var.child.name /}}
	{{/each}}
{{/each}}

or alternate syntax

{{each this.items @@ "parentItem"}}
	{{each this.children, "child"}}
		{{out var.parentItem.name /}} is parent of {{out var.child.name /}}
	{{/each}}
{{/each}}

or with decorator ?

{{each this.items >> var "parentItem"}}
	{{each this.children >> var "child"}}
		{{out var.parentItem.name /}} is parent of {{out var.child.name /}}
	{{/each}}
{{/each}}

same as :

{{each this.items}}
	{{define "parentItem", this /}}
	{{each this.children}}
		{{define "child", this /}}
		{{out var.parentItem.name /}} is parent of {{out var.child.name /}}
	{{/each}}
{{/each}}

-------

Example for this syntax:
{{ firstof var1, var2, var3, "fallback value" /}}  from django
done like this : {{ out (0 || 0 || 0 || 2 || 1) }}

-------

/**
 * Sample to show a Loop 31 times without data
 */
 Or {{each spawn(31) }} or similar ?
 Or {{each new Array(31) }}

----

{{cycle "odd", "even" }}  (like django)

-------
Define a variable using JSON and store as an object

NOT POSSIBLE FOR NOW BECAUSE DECORATORS ARE PARSED
OUTSIDE OF THE TAG HANDLER ITSELF

{{var "messageCount" >> json /}}
	{
		a: 1,
		b: 2
	}
{{/var}}

-------
i18n could be a template global

{{out i18n("Bonjour à vous les amis!")/}}
{{out "Bonjour à vous les amis!" >> i18n /}}
{{i18n}}Bonjour à vous les amis!{{/i18n}}
{{i18n "bonjour"}}Bonjour à vous les amis!{{/i18n}}
{{out >> i18n "bonjourAvous"}}Bonjour à vous les amis!{{/i18n}}

------

More complete Loop object

forloop.counter 	The current iteration of the loop (1-indexed)
forloop.revcounter 	The number of iterations from the end of the loop (1-indexed)
forloop.first 	True if this is the first time through the loop
forloop.last 	True if this is the last time through the loop
forloop.parentloop 	For nested loops, this is the loop "above" the current one


------

{{macro "welcomeUser", "firstname", "lastname"}}
	<p>Welcome {{out args.firstname + " " + args.lastname /}}</p>
	<div style="padding:20px; border:1px solid;">
		{{out args.content /}}
	</div>
{{/macro}}

{{var "messageCount", 4 /}}
{{call "welcomeUser", this.firstname, this.lastname }}
	<p>You have {{out vars.messageCount /}} new messages in your inbox!</p>
{{/call}}

------

{{tag "welcomeUser"}}
	<p>
		Welcome {{out this.fullUsername //}
	</p>
{{/tag}}

{{welcomeUser user /}}

-----

Reusability tags:
{{load "templateName" }}
{{include "templatenName" /}}

-------

